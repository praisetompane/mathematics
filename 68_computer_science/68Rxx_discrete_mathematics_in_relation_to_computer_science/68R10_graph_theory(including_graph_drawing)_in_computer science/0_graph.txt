def graph(Leighton, van Dijk, 2010):
    - formal: ???

        - in words:
            graph G is a set of sets 𝑉 and 𝐸:
                𝑉 = nonempty set of items called vertices/nodes.
                𝐸 = set of 2-item sets, which are subsets of 𝑉 called edges
                    𝐸 = {{𝑎,𝑏} : 𝑎,𝑏 ∈ 𝑉}.
                ∴ 𝐸 ⊂ 𝑉

    - plain english: A set of things(nodes/vertices)
                        and the relationships(edges) between the nodes
                            there can also be no relationships between all or some of the nodes

    - intuition: ???

    - properties:
        - Edges: (𝑉 - 1)² = the number of edges in a graph with all vertices connected.

        - Types:
            - undirected: edges have no direction
                - example:
                    y connected_to x = x connected_to y
                    y - x = y - x [`-` = connected_to]
                    therefore: bidirectional

            - directed(digraph): edges have direction
                - example:
                    y connected_to x != x connected_to y
                    y -> x != x -> y
                    therefore: unidirectional

            - weighted: edges have weights(the weights can represent arbitrary values(distance, cost, strength etc))
                        can be either directed or undirected

            - Special graphs (concepts represented as graphs)[many more exist]:
                - Tree
                - Rooted Tree
                    In-Tree
                    Out-Tree
                - Directed Acyclovir Graph(DAG)
                - Cyclic Graphs
                - Bipartite Graph
                - Complete Graph (i.e. connected graph)

        - Representations:
            - Adjacency list
                Node stores:
                    name
                    its data (optional)
                    list nodes it is connected to

                example: #python
                    class Node:
                        name = ""
                        connections = [] #type Node

                    class Graph
                        nodes = [] #type Node

            - Adjacency matrix,
                N * N matrix(m), where N is number of nodes
                Truth value at m[i][j] = edge between node i and j

                    00001
                    00100
                    10101
                    01101

            - Edge list

    - examples:
            x₂-----x₆
         e₁/
          /
        x₁---------x₄
          \          \
           x₅         x₃

        𝐺 = {𝑉, 𝐸}
        𝑉 = { 𝑥₁, 𝑥₂, 𝑥₃, 𝑥₄, 𝑥₅, 𝑥₆ }
        𝐸 = {
                {𝑥₁, 𝑥₂},
                {𝑥₁, 𝑥₅},
                {𝑥₁, 𝑥₄},
                {𝑥₂, 𝑥₆},
                {𝑥₄, 𝑥₃}
            }

    - use cases: ???

    - proof: ???

References:
    - Leighton T, van Dijk, M. 2010. Lecture 6: Graph Theory and Coloring, MIT 6.042J Mathematics For Computer Science. Massachusetts Institute of Technology.